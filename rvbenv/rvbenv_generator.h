/**
 * @file rvbenv_generator.h
 * Computes reverberation envelopes from eigenverbs.
 */
#pragma once

#include <usml/bistatic/bistatic_pair.h>
#include <usml/managed/update_notifier.h>
#include <usml/rvbenv/rvbenv_collection.h>
#include <usml/types/seq_vector.h>
#include <usml/usml_config.h>
#include <usml/wavegen/wavefront_generator.h>

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/vector.hpp>
#include <cstddef>

namespace usml {
namespace rvbenv {

using namespace usml::bistatic;
using namespace usml::managed;
using namespace usml::ocean;
using namespace usml::threads;

/// @ingroup rvbenv
/// @{

/**
 * Background task to compute reverberation envelope collection for a bistatic
 * pair. Loops through the bistatic eigenverbs in the pair, computes the beam
 * pattern gain for each frequency/beam number, and asks rvbenv_collection to
 * add this contribution to the envelope time series. Repeats for each interface
 * in the ocean to incorporate the effects of the bottom, surface, and volume
 * reverberation. Notifies update listeners when the computation is complete.
 */
class USML_DECLSPEC rvbenv_generator
    : public thread_task,
      public update_notifier<rvbenv_collection::csptr> {
   public:
    /// Hide default constructor to prevent incorrect use.
    rvbenv_generator() = delete;

    /// Hide copy constructor to prevent incorrect use.
    rvbenv_generator(const wavefront_generator&) = delete;

    /// Hide assignment operator to prevent incorrect use.
    rvbenv_generator& operator=(const wavefront_generator&) = delete;

    /**
     * Initialize model with data from a bistatic_pair.
     *
     * @param pair       	Bistatic pair that creates reverberation.
     * @param times 		Times at which reverb is computed (sec).
     * @param freqs  		Frequencies at which reverb is computed (Hz).
     * @param num_azimuths	Number of receiver azimuths in result.
     */
    rvbenv_generator(const bistatic_pair::sptr& pair,
                     const seq_vector::csptr& times,
                     const seq_vector::csptr& freqs, size_t num_azimuths);

    /**
     * Compute reverberation envelope collection for a bistatic pair.
     */
    virtual void run();

   private:
    /**
     * Computes the source beam gain for each frequency and beam number.
     *
     * @param de		Elevation angle in world coordinates.
     * @param az		Azimuthal angle in world coordinates.
     * @param beam_work Work space to compute beam paterns.
     * @param beam 		Beam gains at this angle (rows=freq,
     * cols=beam#).
     */
    void beam_gain_src(const rvbenv_collection* collection, double de,
                       double az, vector<double>& beam_work,
                       matrix<double>& beam);

    /**
     * Computes the receiver beam gain for each frequency and beam number.
     *
     * @param de		Elevation angle in world coordinates.
     * @param az		Azimuthal angle in world coordinates.
     * @param beam_work Work space to compute beam paterns.
     * @param beam 		Beam gains at this angle (rows=freq,
     * cols=beam#).
     */
    void beam_gain_rcv(const rvbenv_collection* collection, double de,
                       double az, vector<double>& beam_work,
                       matrix<double>& beam);

    /// Bistatic pair that creates reverberation.
    const bistatic_pair::sptr& _pair;

    /// Times at which reverb is computed (sec).
    const seq_vector::csptr _times;

    /// Frequencies at which reverb is computed (Hz).
    const seq_vector::csptr _freqs;

    /// Number of receiver azimuths in result.
    const size_t _num_azimuths;

    /// Collection of envelopes generated by this calculation.
    rvbenv_collection::csptr _collection;
};

/// @}
}  // end of namespace rvbenv
}  // end of namespace usml
