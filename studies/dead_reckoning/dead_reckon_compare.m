%
% dead_reckon_compare - visualization of fathometers generated by dead
%                       reconkoning from a wavefront generated set of 
%                       eigenrays for the dead_reckoning "studies".
%
% Allows for the comparison of dead reckoned fathommeters from a set of
% eigenrays generated by waveq3d.
% Environment in Sea of China. Fast moving target travels due north 
% towards an ADAR bouy.
% 
%      - Source: Starts at 54.995N, 149.0E, 15.24 meter deep
%      - Receiver: 55.0N, 149.0E, 1 meter deep
%      - Frequency: Various 
%      - Travel Time: 7 seconds
%      - Time Step: 10 msec
%      - D/E: [-90,90] 181 ray rayfan with 4 extra rays
%      - AZ: [-180,180] in 15.0 deg steps
%      - Bottom:    Flat, 505m, Rayleigh SAND
%      - Profile:   Constant  1500 m/s
%      - multistatic:         true
%      - source strength:     200 dB
%      - pulse length:		  250 msec
%      - reverb duration:	  7.0 sec
%      - transmit frequency:  2k, 5.3k, 8.6k, 11.9k Hz
%      - src beam pattern:   omni directional
%      - rcv beam pattern: 	 omni directional
%
% The resulting fathometer collections are stored in the 
% "fathometer_src_3_rcv_1_request_X.nc" netCDF's files for analysis 
% by this matlab routine; where X is from 1 thur 3.
%
clear;
close all;

% Initial results from waveq3d
[fatho1, eigenrays1] = load_fathometer('fathometer_src_3_rcv_1_request_1.nc')
% Dead Reckoned results after moving 1000m towards the reciver.
[fatho2, eigenrays2] = load_fathometer('fathometer_src_3_rcv_1_request_2.nc')
% Dead Reckoned results after moving another 1000m towards the reciver.
[fatho3, eigenrays3] = load_fathometer('fathometer_src_3_rcv_1_request_3.nc')

ray = eigenrays1;
for n=1:length(ray)
   y1(n) = ray(n).intensity(1) * -1.0;
   x1(n) = ray(n).travel_time;
end

figure
s1 = stem (x1,y1, '.b');
set(s1,'BaseValue', -90);
set(gca,'Xlim',[1.95 3.65]);
set(gca,'Ylim',[-80 -68]);
hold on;


ray = eigenrays2;
for n=1:length(ray)
   y2(n) = ray(n).intensity(1) * -1.0;
   x2(n) = ray(n).travel_time;
end

s2 = stem(x2,y2, '.c')
set(s2,'BaseValue', -90);
xlabel('Time in seconds');
ylabel('Magnitude in dB');


ray = eigenrays3;
for n=1:length(ray)
   y3(n) = ray(n).intensity(1) * -1.0;
   x3(n) = ray(n).travel_time;
end

s3 = stem (x3,y3, '.r');
set(s3,'BaseValue', -85);
legend( 't1', 't2', 't3', 'Location', 'Best' );
title ('Dead Reckoning for t2 and t3, based on t1' );
xlabel('Time in seconds');
ylabel('Magnitude in dB');

